from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update, error
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ConversationHandler, ContextTypes
import os
import json
from datetime import datetime
import sqlite3
from typing import Optional, Any
import logging
from itit_func import logger


def init_database():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('TasksDataBase.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS tasks (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        from_chat_id TEXT NOT NULL,
        first_name TEXT,
        last_name TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        object TEXT,
        task_name TEXT,
        task_description TEXT,
        file_ids TEXT,
        claimed TEXT,
        desk TEXT,
        answ_id TEXT,
        weeek_task_id TEXT,
        week_url TEXT,
        status TEXT
    )
    ''')
    conn.commit()
    conn.close()

# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ID –∑–∞–¥–∞—á–∏
t_id = -1

# –°–æ—Å—Ç–æ—è–Ω–∏—è
OBJECT, TASKNAME, DESCRIPTION, FILEORNOT, INSERTFILE, CONFIRMATION, SEND, WAITID, WHATTODO, SENDFILE, SEARCHFILE, GETURL = range(12)
# OBJECT - –≤—ã–±–æ—Ä –æ–±—ä–µ–∫—Ç–∞ (select_object)
# TASKNAME - –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏ (taskname)
# DESCRIPTION - –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ (taskdescription)
# FILEORNOT - –≤—ã–±–æ—Ä –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ (fileornot)
# INSERTFILE - –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫ –∑–∞–¥–∞—á–µ (insert_file)
# CONFIRMATION - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π (confirmation)
# SEND - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç –±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–≤ (send)
# WAITID - –ø–æ–ª—É—á–µ–Ω–∏–µ ID –∑–∞–¥–∞—á–∏ (!!!!! –°–î–ï–õ–ê–¢–¨)
# WHATTODO - –≤—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è (whattodo)
# SENDFILE - –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ (–æ—Ç–≤–µ—Ç) (!!!!! –°–î–ï–õ–ê–¢–¨)
# SEARCHFILE - –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (!!!!! –°–î–ï–õ–ê–¢–¨)

# –ö–æ–¥ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
CANCEL = "cancel"


async def echo(update, context):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: " + update.message.text
    )

async def start(update, context):
    await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É. –í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")

async def init_dialog(update, context):
    init_database()
    context.user_data.clear()
    keyboard = [[
                    InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É", callback_data='newtask'),
                    InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á–∏", callback_data='searchtask')],
                [
                    InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É", callback_data='sendfile'),
                    InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É", callback_data='GetURLtask')
                ]]
    sent_message = await context.bot.send_message(chat_id=update.effective_chat.id, text = f"–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=InlineKeyboardMarkup(keyboard))
    context.user_data['last_mess_id'] = sent_message.id
    return WHATTODO


async def whattodo(update, context):
    query = update.callback_query
    await query.answer(text = f'–í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "{query.data}"') #–û—Ç–ª–∞–¥–∫–∞
    try:
        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=context.user_data['last_mess_id']
        )
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
    if query.data == 'newtask':
        try:
            chat_id = str(update.effective_chat.id)
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            conn = sqlite3.connect('TasksDataBase.db')
            cursor = conn.cursor()
            cursor.execute(
                "SELECT id FROM tasks WHERE from_chat_id = ? AND status = 'in_progress'",
                (chat_id,)
            )
            existing_task = cursor.fetchone()

            if existing_task:
                cursor.execute(
                    "UPDATE tasks SET status = 'bad_end' WHERE id = ?",
                    (existing_task[0],)
                )
                conn.commit()

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
            context.user_data['db_task_id'] = create_empty_row(from_chat_id=chat_id)
            update_column(context.user_data['db_task_id'], 'status', 'in_progress')

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = generate_buttons('projects.txt')
            keyboard.append([InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∞", callback_data=CANCEL)])
            reply_markup = InlineKeyboardMarkup(keyboard)
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            sent_message = await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç:",
                reply_markup=reply_markup
            )
            context.user_data['last_mess_id'] = sent_message.id
            return OBJECT

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END
    else:
        context.user_data['mode'] = query.data
        return WAITID



async def stub_handler(update, context, sost):
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∏–∑ user_data
    mode = context.user_data.get('mode', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    await update.message.reply_text(
        f"–≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞.\n"
        f"mode = {mode}\n"
        f"sost = {str(sost)}"
    )
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    keyboard = [
        [
            InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É", callback_data='newtask'),
            InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á–∏", callback_data='searchtask')
        ],
        [
            InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É", callback_data='sendfile'),
            InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É", callback_data='GetURLtask')
        ]
    ]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    sent_message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['last_mess_id']=sent_message.id
    return WHATTODO

async def select_object(update, context):
    query = update.callback_query
    await query.answer(text = f'–í—ã–±—Ä–∞–Ω–æ - {query.data}') # –û—Ç–ª–∞–¥–∫–∞
    message_id = query.message.message_id
    if query.data == CANCEL:
        return await cancel(update, context)
    context.user_data['last_mess_id'] = message_id
    context.user_data['project'] = query.data
    try:
        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=message_id
        )
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
    keyboard = [[InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∞", callback_data=CANCEL)]]
    sent_message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞':",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['last_mess_id'] = sent_message.id
    return TASKNAME



async def taskname(update, context):
    if update.callback_query and update.callback_query.data == CANCEL:
        await update.callback_query.answer(text = '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã') # –û—Ç–ª–∞–¥–∫–∞
        return await cancel(update, context)

    task_name = str(update.message.text)
    try:
        await context.bot.delete_message(
            chat_id = update.effective_chat.id,
            message_id = context.user_data['last_mess_id']
        )
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')

    update_column(context.user_data['db_task_id'], 'task_name', task_name)
    keyboard = [[InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∞", callback_data=CANCEL)]]
    sent_message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['last_mess_id'] = sent_message.message_id
    return DESCRIPTION


async def taskdescription(update, context):
    if update.callback_query and update.callback_query.data == CANCEL:
        await update.callback_query.answer('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã') # –û—Ç–ª–∞–¥–∫–∞
        return await cancel(update, context)

    task_description = str(update.message.text)
    update_column(context.user_data['db_task_id'], 'task_description', task_description)

    try:
        await context.bot.delete_message(
            chat_id = update.effective_chat.id,
            message_id = context.user_data['last_mess_id']
        )
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')

    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    cur_chat_id = str(update.effective_chat.id)
    update_column(context.user_data['db_task_id'], 'from_chat_id', cur_chat_id)

    first_name = str(update.effective_user.first_name)
    update_column(context.user_data['db_task_id'], 'first_name', first_name)

    last_name = str(update.effective_user.last_name)
    update_column(context.user_data['db_task_id'], 'last_name', last_name)

    obj = get_list('projects.txt')[int(context.user_data['project'])]
    update_column(context.user_data['db_task_id'], 'object', obj)

    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —Ö–æ—á—É", callback_data='Y')],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –Ω–µ —Ö–æ—á—É", callback_data='N')]
    ]
    sent_message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['last_mess_id'] = sent_message.message_id
    return FILEORNOT


async def fileornot(update, context):
    query = update.callback_query
    await query.answer(f'–í–∞—à –≤—ã–±–æ—Ä - {query.data}')
    if query.data == 'Y':
        keyboard = [
            [InlineKeyboardButton("‚ùå –ù–µ —Ö–æ—á—É –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª—ã", callback_data='SKIP')],
            [InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∞", callback_data=CANCEL)]
        ]
        text = (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ <b>–±–µ–∑ —Ç–µ–∫—Å—Ç–∞</b>, –ø—Ä–∏–∫—Ä–µ–ø–∏–≤ –ª–∏–±–æ <b>–¢–û–õ–¨–ö–û</b> —Ñ–∞–π–ª—ã, –ª–∏–±–æ <b>–¢–û–õ–¨–ö–û</b> —Ñ–æ—Ç–æ, –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
            "<b>–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏ —Ñ–∞–π–ª—ã, –∏ —Ñ–æ—Ç–æ –∏–ª–∏ –±–æ–ª–µ–µ 10 —Ñ–∞–π–ª–æ–≤/—Ñ–æ—Ç–æ ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ –∞—Ä—Ö–∏–≤ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ–≥–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.</b>\n"
            "–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ —ç—Ç–æ—Ç —à–∞–≥, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
        )
        try:
            await query.edit_message_text(
                text=text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
        except error as e:
            logger.exception("–û—à–∏–±–∫–∞ –≤ fileornot –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
            await query.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return await cancel(update, context)
        return INSERTFILE

    elif query.data == 'N':
        return await skip_files(update, context)

    else:
        logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞')
        return await cancel(update, context)



async def confirmation(update, context):
    query = update.callback_query
    await query.answer('–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º') # –û—Ç–ª–∞–¥–∫–∞
    db_task_id = context.user_data.get('db_task_id')
    if not db_task_id:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–û—à–∏–±–∫–∞: ID –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        return await cancel(update, context)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    conn = sqlite3.connect('TasksDataBase.db')
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
        cursor.execute(
            "SELECT object, task_name, task_description, from_chat_id, created_at, file_ids FROM tasks WHERE id = ?",
            (db_task_id,)
        )
        task_data = cursor.fetchone()

        if not task_data:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
            )
            return await cancel(update, context)

        object_name, task_name, task_description, user_id, created_at, file_ids_json = task_data

        user = update.effective_user
        user_link = f'<a href="tg://user?id={user.id}">{user.full_name}</a>'

        # –§–∞–π–ª—ã
        try:
            file_ids = json.loads(file_ids_json)
            doc_ids = file_ids.get('doc_ids', [])
            photo_ids = file_ids.get('photo_ids', [])
        except json.JSONDecodeError:
            doc_ids = []
            photo_ids = []

        # –°–ø–∏—Å–æ–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤
        original_files = []
        log_path = context.user_data.get('log_path')
        if log_path and os.path.exists(log_path):
            with open(log_path, 'r', encoding='utf-8') as log_file:
                for line in log_file:
                    if '->' in line:
                        original_name = line.split('->')[0].strip()
                        original_files.append(original_name)

        files_list = "\n".join([f"- {f}" for f in original_files]) or "–ù–µ—Ç"

        message_text = (
            f"<b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –∑–∞–¥–∞—á–∏:</b>\n\n"
            f"<b>–û–±—ä–µ–∫—Ç:</b> {object_name}\n"
            f"<b>–ò–º—è –∑–∞–¥–∞—á–∏:</b> {task_name}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task_description}\n\n"
            f"<b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>\n{files_list}\n\n"
            f"–î–æ–±–∞–≤–∏–ª: {user_link}\n"
            f"–î–∞—Ç–∞: {created_at}"
        )

        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='PUBLISH')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=CANCEL)]
        ]
        await query.message.edit_reply_markup(reply_markup=None)
        sent_message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=message_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        context.user_data['last_mess_id']=sent_message.id
        return SEND

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ confirmation")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}"
        )
        return await cancel(update, context)

    finally:
        conn.close()




async def cancel(update, context): # !!! –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏, —Ç–∞–∫ –∏ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(text="–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
    else:
        await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
    text = f"–í—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    keyboard = [[
                    InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É", callback_data='newtask'),
                    InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á–∏", callback_data='searchtask')],
                [
                    InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É", callback_data='sendfile'),
                    InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É", callback_data='GetURLtask')
                ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    sent_message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text= text,
        reply_markup=reply_markup
    )
    update_column(context.user_data['db_task_id'], 'status', 'deleted_by_user')
    context.user_data.clear()
    context.user_data['last_mess_id'] = sent_message.id
    return WHATTODO




def generate_buttons(filename):
    buttons_text = get_list(filename)
    paired_buttons = [buttons_text[i:i + 2] for i in range(0, len(buttons_text), 2)]

    keyboard = []

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–µ –ø–∞—Ä—ã (–ø–µ—Ä–≤—ã–µ N-1 —Ä—è–¥–æ–≤)
    for pair in paired_buttons[:-1] or []:  # or [] –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ paired_buttons –ø—É—Å—Ç–æ–π
        row = [InlineKeyboardButton(btn, callback_data=f"{buttons_text.index(btn) + 1}")
               for btn in pair]
        keyboard.append(row)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥
    if paired_buttons:  # –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä—è–¥
        last_row = paired_buttons[-1]
        if len(last_row) == 1:  # –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–Ω–æ–ø–∫–∞ –æ–¥–Ω–∞
            # –î–æ–±–∞–≤–ª—è–µ–º –µ—ë –ø–æ —Ü–µ–Ω—Ç—Ä—É
            keyboard.append([InlineKeyboardButton(last_row[0],
                                                  callback_data=f"{buttons_text.index(last_row[0]) + 1}")])
        else:  # –µ—Å–ª–∏ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ä—è–¥—É
            row = [InlineKeyboardButton(btn, callback_data=f"{buttons_text.index(btn) + 1}")
                   for btn in last_row]
            keyboard.append(row)

    return keyboard


async def instr(update, context):
    with open('instruction.txt', 'r', encoding='utf-8') as file:
        text = file.read()
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text)

def get_list(filename):
    with open(filename, 'r', encoding='utf-8') as file:
        lines = file.readlines()
    return lines


async def skip_files(update, context):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
    if update.callback_query:
        query = update.callback_query
        await query.answer(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}')

        if query.data == 'N':
            # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π JSON –ø–æ —Ç–æ–º—É –∂–µ —à–∞–±–ª–æ–Ω—É
            tid = context.user_data['db_task_id']
            empty_files_data = {
                "tid": tid,
                "file_count": 0,
                "doc_ids": [],
                "photo_ids": [],
                "timestamp": datetime.now().isoformat()
            }
            files_json = json.dumps(empty_files_data, indent=2)

            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data['last_mess_id']
                )
            except Exception as e:
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')

            await query.message.reply_text(
                text=(
                    '‚úÖ –í—ã —Ä–µ—à–∏–ª–∏ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª—ã –∫ –∑–∞–¥–∞—á–µ.\n\n'
                    f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö:</b>\n<pre>{files_json}</pre>'
                ),
                reply_markup=InlineKeyboardMarkup(
                    [
                        [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='continue')]
                    ]
                ),
                parse_mode="HTML"
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π JSON –≤ –±–∞–∑—É
            update_column(context.user_data['db_task_id'], 'file_ids', files_json)
            return CONFIRMATION

async def insert_file(update, context, path: str = '/data/bot_uploads'):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–æ–∫
    if update.callback_query:
        query = update.callback_query
        query.answer(text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {query.data}')
        if query.data == 'SKIP':
            return CONFIRMATION
        elif query.data == 'NEXT':
            log_path = context.user_data.get('log_path', '[–ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω]')
            folder = context.user_data.get('save_dir', '[–ø—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω]')
            files_json = context.user_data.get('files_json', '{}')

            try:
                log_dict = json.loads(files_json)
            except Exception as e:
                log_dict = {"error": str(e), "raw": files_json}
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=context.user_data['last_mess_id']
                )
            except Exception as e:
                logger.error(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}')
            await query.message.reply_text(
                text=(
                    f'‚úÖ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É <code>{folder}</code>\n'
                    f'–õ–æ–≥: <code>{log_path}</code>\n\n'
                    f'<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö:</b>\n<pre>{json.dumps(log_dict, indent=2, ensure_ascii=False)}</pre>'
                ),
                reply_markup=InlineKeyboardMarkup(
                    [
                        [InlineKeyboardButton("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='continue')]
                    ]
                ),
                parse_mode="HTML"
            )
              # –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            update_column(context.user_data['db_task_id'], 'file_ids', files_json)
            return CONFIRMATION # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏

        elif query.data == 'Repeat':
            keyboard = [
                [InlineKeyboardButton("‚ùå –ù–µ —Ö–æ—á—É –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª—ã", callback_data='SKIP')],
                [InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∞", callback_data=CANCEL)]
            ]
            await query.message.edit_reply_markup(reply_markup = None)
            await query.message.reply_text(
                text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ <b>–±–µ–∑ —Ç–µ–∫—Å—Ç–∞</b>, –ø—Ä–∏–∫—Ä–µ–ø–∏–≤ –ª–∏–±–æ <b>–¢–û–õ–¨–ö–û</b> —Ñ–∞–π–ª—ã, –ª–∏–±–æ <b>–¢–û–õ–¨–ö–û</b> —Ñ–æ—Ç–æ, –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n"
                    "<b>–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏ —Ñ–∞–π–ª—ã, –∏ —Ñ–æ—Ç–æ –∏–ª–∏ –±–æ–ª–µ–µ 10 —Ñ–∞–π–ª–æ–≤/—Ñ–æ—Ç–æ ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ –∞—Ä—Ö–∏–≤ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ–≥–æ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é.</b>\n"
                    "–í —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç–µ —ç—Ç–æ—Ç —à–∞–≥, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
            return INSERTFILE
        else:
            return await cancel(update, context)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã (–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)
    if update.message.text or not (update.message.document or update.message.photo):
        keyboard = [
            [InlineKeyboardButton("‚ùå –ù–µ —Ö–æ—á—É –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª—ã", callback_data='SKIP')],
            [InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∞", callback_data=CANCEL)]
        ]
        await update.message.edit_reply_markup(reply_markup=None)
        await update.message.reply_text(
            text="‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ <b>–±–µ–∑ —Ç–µ–∫—Å—Ç–∞</b>, –Ω–æ —Å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )
        return INSERTFILE

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
    tid = context.user_data['db_task_id']
    date_folder = datetime.now().strftime("%Y-%m-%d")
    save_dir = os.path.join(path, date_folder, str(tid))
    os.makedirs(save_dir, exist_ok=True)

    logs_dir = os.path.join(path, date_folder, "Logs")
    os.makedirs(logs_dir, exist_ok=True)
    log_path = os.path.join(logs_dir, f"{tid}.txt")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è JSON
    if 'files_data' not in context.user_data:
        context.user_data['files_data'] = {
            "tid": tid,
            "file_count": 0,
            "doc_ids": [],
            "photo_ids": [],
            "timestamp": datetime.now().isoformat()
        }

    with open(log_path, 'a', encoding='utf-8') as log_file:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        if update.message.document:
            original_name = update.message.document.file_name
            did = get_d_id()
            new_name = f"{did}{os.path.splitext(original_name)[1]}"
            file = await update.message.document.get_file()
            await file.download_to_drive(os.path.join(save_dir, new_name))
            log_file.write(f"{original_name} -> {new_name}\n")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–∫—É–º–µ–Ω—Ç–µ
            context.user_data['files_data']['doc_ids'].append(did)
            context.user_data['files_data']['file_count'] += 1
            increase_d_id()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        if update.message.photo:
            photo = update.message.photo[-1]
            original_name = f"photo_{photo.file_unique_id}.jpg"
            did = get_d_id()
            new_name = f"{did}.jpg"
            file = await photo.get_file()
            await file.download_to_drive(os.path.join(save_dir, new_name))
            log_file.write(f"{original_name} -> {new_name}\n")

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ
            context.user_data['files_data']['photo_ids'].append(did)
            context.user_data['files_data']['file_count'] += 1
            increase_d_id()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç–∏ –∏ JSON –≤ user_data
    context.user_data['save_dir'] = save_dir
    context.user_data['log_path'] = log_path
    context.user_data['files_json'] = json.dumps(context.user_data['files_data'], indent=2)

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–∞–π–ª—ã –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    keyboard = [
        [InlineKeyboardButton("‚úÖ –î–∞, —Ö–æ—á—É –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–∞–π–ª—ã", callback_data='Repeat')],
        [InlineKeyboardButton("‚ùå –ù–µ—Ç, –±–æ–ª—å—à–µ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç", callback_data='NEXT')],
        [InlineKeyboardButton("üõë –û—Ç–º–µ–Ω–∞", callback_data=CANCEL)]
    ]
    sent_message = await update.message.reply_text(
        text=f"–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {context.user_data['files_data']['file_count']}\n"
             f"–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë —Ñ–∞–π–ª—ã?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data['last_mess_id'] = sent_message.id
    return INSERTFILE


async def send(update, context, chat_id: int = -1002874666761):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î
    query = update.callback_query
    if query.data == CANCEL:
        return await cancel(update, context)
    db_task_id = context.user_data.get('db_task_id')
    if not db_task_id:
        await update.message.reply_text("–û—à–∏–±–∫–∞: ID –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ConversationHandler.END

    conn = sqlite3.connect('TasksDataBase.db')
    cursor = conn.cursor()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        cursor.execute(
            "SELECT object, task_name, task_description, from_chat_id, created_at, file_ids FROM tasks WHERE id = ?",
            (db_task_id,)
        )
        task_data = cursor.fetchone()

        if not task_data:
            await update.message.reply_text("–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return ConversationHandler.END

        object_name, task_name, task_description, user_id, created_at, file_ids_json = task_data

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = update.effective_user
        user_link = f'<a href="tg://user?id={user.id}">{user.full_name}</a>'

        # –ü–∞—Ä—Å–∏–º JSON —Å —Ñ–∞–π–ª–∞–º–∏
        try:
            file_ids = json.loads(file_ids_json) #E!!!!!
            doc_ids = file_ids.get('doc_ids', [])
            photo_ids = file_ids.get('photo_ids', [])
        except json.JSONDecodeError:
            doc_ids = []
            photo_ids = []

        # –ß–∏—Ç–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –ª–æ–≥–∞
        original_files = []
        log_path = context.user_data.get('log_path')
        if log_path and os.path.exists(log_path):
            with open(log_path, 'r', encoding='utf-8') as log_file:
                for line in log_file:
                    if '->' in line:
                        original_name = line.split('->')[0].strip()
                        original_files.append(original_name)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        files_list = "\n".join([f"- {f}" for f in original_files])

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
        admin_message_text = (
            f"<b>–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞:</b>\n\n"
            f"<b>–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π ID:</b> {db_task_id}\n"
            f"<b>–û–±—ä–µ–∫—Ç:</b> {object_name}\n"
            f"<b>–ò–º—è –∑–∞–¥–∞—á–∏:</b> {task_name}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task_description}\n\n"
            f"<b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>\n{files_list}\n\n"
            f"–î–æ–±–∞–≤–∏–ª: {user_link}\n"
            f"–î–∞—Ç–∞: {created_at}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ —á–∞—Ç–∞
        admin_keyboard = [
            [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{db_task_id}')],
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'accept_{db_task_id}')]
        ]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç
        admin_message = await context.bot.send_message(
            chat_id=chat_id,
            text=admin_message_text,
            reply_markup=InlineKeyboardMarkup(admin_keyboard),
            parse_mode="HTML",
            disable_web_page_preview=True
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –ë–î
        cursor.execute(
            "UPDATE tasks SET status = 'published' WHERE id = ?",
            (db_task_id,)
        )
        conn.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_message_text = (
            f"<b>–ó–∞–¥–∞—á–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞</b>\n\n"
            f"<b>–û–±—ä–µ–∫—Ç:</b> {object_name}\n"
            f"<b>–ò–º—è –∑–∞–¥–∞—á–∏:</b> {task_name}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {task_description}\n\n"
            f"<b>–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:</b>\n{files_list}\n\n"
            f"–î–∞—Ç–∞: {created_at}"
        )

        await context.bot.edit_message_text(
            chat_id=user_id,
            message_id=context.user_data.get('last_mess_id'),
            text=user_message_text,
            reply_markup=None,
            parse_mode="HTML"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        keyboard = [
            [
                InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É", callback_data='newtask'),
                InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã –∑–∞–¥–∞—á–∏", callback_data='searchtask')
            ],
            [
                InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É", callback_data='sendfile'),
                InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É", callback_data='GetURLtask')
            ]
        ]

        sent_message = await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        context.user_data.clear()
        context.user_data['last_mess_id']=sent_message.message_id
        return WHATTODO

    except Exception as e:
        await query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: {str(e)}")
        return ConversationHandler.END
    finally:
        conn.close()

def get_d_id():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    if not os.path.exists('DID.txt'):
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å default-–∑–Ω–∞—á–µ–Ω–∏–µ–º
        with open('DID.txt', 'w', encoding='utf-8') as file:
            file.write("0")  # –ù–∞–ø—Ä–∏–º–µ—Ä, ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = 0
    # –¢–µ–ø–µ—Ä—å —á–∏—Ç–∞–µ–º (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    with open('DID.txt', 'r', encoding='utf-8') as file:
        id = int(file.read())
    return id

def increase_d_id():
    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ —Ñ–∞–π–ª–æ–≤
    if not os.path.exists('DID.txt'):
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å default-–∑–Ω–∞—á–µ–Ω–∏–µ–º
        with open('DID.txt', 'w', encoding='utf-8') as file:
            file.write("0")  # –ù–∞–ø—Ä–∏–º–µ—Ä, ID –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é = 0
    # –¢–µ–ø–µ—Ä—å —á–∏—Ç–∞–µ–º (–≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    with open('DID.txt', 'r', encoding='utf-8') as file:
        id = int(file.read())
    with open('DID.txt', 'w', encoding='utf-8') as file:
        file.write(str(id+1))




def create_empty_row(
        desired_id: Optional[int] = None,
        db_path: str = 'TasksDataBase.db',
        table_name: str = 'tasks',
        from_chat_id: str = "unknown"  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä —Å default –∑–Ω–∞—á–µ–Ω–∏–µ–º
) -> int:
    """
    –°–æ–∑–¥–∞–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ SQLite.
    """
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    try:
        # –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        columns = ["status", "from_chat_id"]
        values = ["draft", from_chat_id]
        placeholders = ["?", "?"]

        if desired_id is not None:
            columns.insert(0, "id")
            values.insert(0, desired_id)
            placeholders.insert(0, "?")

        query = f"""
            INSERT INTO {table_name} ({', '.join(columns)})
            VALUES ({', '.join(placeholders)})
        """

        cursor.execute(query, values)
        row_id = cursor.lastrowid if desired_id is None else desired_id

        conn.commit()
        return row_id

    except Exception as e:
        conn.rollback()
        raise e
    finally:
        conn.close()


def update_column(
        row_id: int,
        column_name: str,
        new_value: Any,
        id_column: str = "id",
        db_path: str = 'TasksDataBase.db',
        table_name: str = "tasks"
) -> bool:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        db_path (str): –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        table_name (str): –ò–º—è —Ç–∞–±–ª–∏—Ü—ã
        row_id (int): ID –∏–∑–º–µ–Ω—è–µ–º–æ–π —Å—Ç—Ä–æ–∫–∏
        column_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞
        new_value (Any): –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        id_column (str): –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–∞ —Å ID (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'id')

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        bool: True –µ—Å–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        cursor.execute(
            f"SELECT 1 FROM {table_name} WHERE {id_column} = ?",
            (row_id,)
        )
        if not cursor.fetchone():
            return False

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        cursor.execute(
            f"UPDATE {table_name} SET {column_name} = ? WHERE {id_column} = ?",
            (new_value, row_id)
        )

        conn.commit()
        return cursor.rowcount > 0

    except sqlite3.Error as e:
        conn.rollback()
        raise sqlite3.Error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

    finally:
        conn.close()